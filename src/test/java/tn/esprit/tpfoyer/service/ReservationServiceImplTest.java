package tn.esprit.tpfoyer.service;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import tn.esprit.tpfoyer.entity.Reservation;
import tn.esprit.tpfoyer.repository.ReservationRepository;

import java.util.Date;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ReservationServiceImplTest {

    @Mock
    private ReservationRepository reservationRepository;

    @InjectMocks
    private ReservationServiceImpl reservationService;

    @Test
    void testRetrieveAllReservations() {
        // Arrange
        Reservation res1 = new Reservation("RES-001", new Date(), true, null);
        Reservation res2 = new Reservation("RES-002", new Date(), false, null);
        when(reservationRepository.findAll()).thenReturn(List.of(res1, res2));

        // Act
        List<Reservation> result = reservationService.retrieveAllReservations();

        // Assert
        assertNotNull(result);
        assertEquals(2, result.size());
    }

    @Test
    void testRetrieveReservation_Success() {
        // Arrange
        String reservationId = "RES-123";
        Reservation mockReservation = new Reservation(reservationId, new Date(), true, null);
        when(reservationRepository.findById(reservationId)).thenReturn(Optional.of(mockReservation));

        // Act
        Reservation result = reservationService.retrieveReservation(reservationId);

        // Assert
        assertNotNull(result);
        assertEquals(reservationId, result.getIdReservation());
    }

    @Test
    void testRetrieveReservation_NotFound_ShouldThrowException() {
        // Arrange
        String nonExistentId = "ID-NOT-FOUND-404";
        when(reservationRepository.findById(nonExistentId)).thenReturn(Optional.empty());

        // Act & Assert
        // This test is vital. It confirms your service's behavior when a reservation doesn't exist.
        assertThrows(NoSuchElementException.class, () -> {
            reservationService.retrieveReservation(nonExistentId);
        });
    }

    @Test
    void testAddReservation() {
        // Arrange
        // The ID is often generated by the database, so we pass null for a new entity
        Reservation newReservation = new Reservation(null, new Date(), true, null);
        Reservation savedReservation = new Reservation("NEW-RES-555", new Date(), true, null);
        when(reservationRepository.save(any(Reservation.class))).thenReturn(savedReservation);

        // Act
        Reservation result = reservationService.addReservation(newReservation);

        // Assert
        assertNotNull(result);
        assertEquals("NEW-RES-555", result.getIdReservation()); // Check the ID from the "saved" object
    }


    @Test
    void testModifyReservation() {
        // Arrange
        Reservation existingReservation = new Reservation("RES-007", new Date(), false, null);
        when(reservationRepository.save(existingReservation)).thenReturn(existingReservation);

        // Act
        Reservation result = reservationService.modifyReservation(existingReservation);

        // Assert
        assertNotNull(result);
        assertEquals(false, result.isEstValide());
        verify(reservationRepository, times(1)).save(existingReservation);
    }

    @Test
    void testRemoveReservation() {
        // Arrange
        String reservationIdToRemove = "RES-TO-DELETE";
        doNothing().when(reservationRepository).deleteById(reservationIdToRemove);

        // Act
        reservationService.removeReservation(reservationIdToRemove);

        // Assert (Verify the interaction)
        // For void methods, we verify that the correct method was called on the mock.
        verify(reservationRepository, times(1)).deleteById(reservationIdToRemove);
    }

    @Test
    void testTrouverResSelonDateEtStatus() {
        // Arrange
        Date testDate = new Date();
        boolean testStatus = true;
        List<Reservation> mockReservations = List.of(new Reservation("RES-MATCH-1", testDate, testStatus, null));

        // Mock the specific repository method call
        when(reservationRepository.findAllByAnneeUniversitaireBeforeAndEstValide(testDate, testStatus))
                .thenReturn(mockReservations);

        // Act
        List<Reservation> result = reservationService.trouverResSelonDateEtStatus(testDate, testStatus);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("RES-MATCH-1", result.get(0).getIdReservation());

        // Verify that the repository method was called with the exact parameters
        verify(reservationRepository, times(1))
                .findAllByAnneeUniversitaireBeforeAndEstValide(testDate, testStatus);
    }
}